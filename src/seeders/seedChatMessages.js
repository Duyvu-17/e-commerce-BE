import sequelize from '../config/database.js';
import Customer from '../models/Customer.js';
import Employee from '../models/Employee.js';
import ChatConversation from '../models/ChatConversation.js';
import ChatMessage from '../models/ChatMessage.js';
import { v4 as uuidv4 } from 'uuid'; // Th√™m th∆∞ vi·ªán uuid ƒë·ªÉ t·∫°o ID

const sampleMessages = [
  "Xin ch√†o, t√¥i c·∫ßn gi√∫p ƒë·ª°!",
  "ƒê∆°n h√†ng c·ªßa t√¥i b·ªã l·ªói, b·∫°n ki·ªÉm tra gi√∫p ƒë∆∞·ª£c kh√¥ng?",
  "T√¥i mu·ªën hu·ª∑ ƒë∆°n h√†ng.",
  "S·∫£n ph·∫©m n√†y c√≤n h√†ng kh√¥ng?",
  "C·∫£m ∆°n b·∫°n ƒë√£ h·ªó tr·ª£!",
];

const replyMessages = [
  "Ch√†o b·∫°n, t√¥i c√≥ th·ªÉ gi√∫p g√¨?",
  "T√¥i ƒëang ki·ªÉm tra ƒë∆°n h√†ng, vui l√≤ng ch·ªù m·ªôt ch√∫t.",
  "B·∫°n mu·ªën ƒë·ªïi sang s·∫£n ph·∫©m n√†o?",
  "S·∫£n ph·∫©m v·∫´n c√≤n h√†ng ·∫°!",
  "R·∫•t vui khi ƒë∆∞·ª£c h·ªó tr·ª£ b·∫°n!",
];

const getRandomItem = (arr) => arr[Math.floor(Math.random() * arr.length)];

async function seedChatData() {
  try {
    await sequelize.sync();

    const customers = await Customer.findAll();
    const employees = await Employee.findAll();

    if (!customers.length || !employees.length) {
      throw new Error("‚ö†Ô∏è Kh√¥ng t√¨m th·∫•y d·ªØ li·ªáu Customer ho·∫∑c Employee.");
    }

    for (const customer of customers) {
      const employee = getRandomItem(employees);

      const conversation = await ChatConversation.create({
        customer_id: customer.id,
        status: 'active',
        last_message: 'C·∫£m ∆°n b·∫°n ƒë√£ h·ªó tr·ª£!',
        last_message_time: new Date(),
      });

      const createdAt = new Date(Date.now() - 1000 * 60 * 10); 

      const messages = [
        {
          id: uuidv4(), 
          conversation_id: conversation.id,
          sender_type: 'customer',
          sender_id: customer.id,
          content: getRandomItem(sampleMessages),
          timestamp: new Date(createdAt.getTime() + 1000 * 60 * 1),
        },
        {
          id: uuidv4(), // T·∫°o UUID cho m·ªói message
          conversation_id: conversation.id,
          sender_type: 'employee',
          sender_id: employee.id,
          content: getRandomItem(replyMessages),
          timestamp: new Date(createdAt.getTime() + 1000 * 60 * 2),
        },
        {
          id: uuidv4(), // T·∫°o UUID cho m·ªói message
          conversation_id: conversation.id,
          sender_type: 'customer',
          sender_id: customer.id,
          content: getRandomItem(sampleMessages),
          timestamp: new Date(createdAt.getTime() + 1000 * 60 * 3),
        },
        {
          id: uuidv4(), // T·∫°o UUID cho m·ªói message
          conversation_id: conversation.id,
          sender_type: 'employee',
          sender_id: employee.id,
          content: getRandomItem(replyMessages),
          timestamp: new Date(createdAt.getTime() + 1000 * 60 * 4),
        },
      ];

      await ChatMessage.bulkCreate(messages);

      await conversation.update({
        last_message: messages[messages.length - 1].content,
        last_message_time: messages[messages.length - 1].timestamp,
      });

      console.log(`‚úÖ Created conversation for customer_id=${customer.id} with employee_id=${employee.id}`);
    }

    console.log("üéâ ƒê√£ seed d·ªØ li·ªáu chat th√†nh c√¥ng.");
  } catch (err) {
    console.error("‚ùå L·ªói khi seeding chat:", err);
  } finally {
    await sequelize.close();
  }
}

seedChatData();