import CustomerInfo from "../../models/CustomerInfo.js";
import CustomerPaymentMethod from "../../models/CustomerPaymentMethod.js";
import Orders from "../../models/Orders.js";
import OrderItem from "../../models/OrderItem.js";
import ProductItem from "../../models/ProductItem.js";
import Product from "../../models/Product.js";
import ProductImage from "../../models/ProductImage.js";
import Customer from "../../models/Customer.js";
import sequelize from "../../config/database.js";



const customerController = {
  // üìå L·∫•y danh s√°ch kh√°ch h√†ng
  getCustomers: async (req, res, next) => {
    try {
      const customers = await Customer.findAll({
        attributes: {
          include: [
            // T√≠nh t·ªïng chi ti√™u c·ªßa customer
            [
              sequelize.literal(`(
                SELECT COALESCE(SUM(oi.quantity * oi.unit_price), 0)
                FROM OrderItem oi
                JOIN Orders o ON oi.order_id = o.id
                WHERE o.customer_id = Customer.id
              )`),
              "totalSpent",
            ],
            // L·∫•y th·ªùi gian ƒë∆°n h√†ng cu·ªëi c√πng c·ªßa customer
            [
              sequelize.literal(`(
                SELECT MAX(o.created_at)
                FROM Orders o
                WHERE o.customer_id = Customer.id
              )`),
              "lastOrder",
            ],
            // L·∫•y s·ªë l∆∞·ª£ng ƒë∆°n h√†ng c·ªßa customer
            [
              sequelize.literal(`(
                SELECT COUNT(o.id)
                FROM Orders o
                WHERE o.customer_id = Customer.id
              )`),
              "ordersCount",
            ],
          ],
        },
        include: [
          {
            model: CustomerInfo,
            attributes: ["fullname", "phone_number", "avatar"],
            required: false,
          },
        ],
      });

      res.status(200).json({ status: "success", data: customers });
    } catch (error) {
      next(error);
    }
  },

  // üìå L·∫•y th√¥ng tin chi ti·∫øt kh√°ch h√†ng
// üìå L·∫•y th√¥ng tin chi ti·∫øt kh√°ch h√†ng
getCustomerById: async (req, res, next) => {
  try {
    const { id } = req.params;
    const customer = await Customer.findByPk(id, {
      attributes: {
        include: [
          "id", "email", "status", "isVerified", "created_at",
          // T·ªïng s·ªë ti·ªÅn ƒë√£ chi
          [
            sequelize.literal(`(
              SELECT COALESCE(SUM(oi.quantity * oi.unit_price), 0)
              FROM OrderItem oi
              JOIN Orders o ON oi.order_id = o.id
              WHERE o.customer_id = Customer.id
            )`),
            "totalSpent",
          ],
          // L·∫ßn mua h√†ng g·∫ßn nh·∫•t
          [
            sequelize.literal(`(
              SELECT MAX(o.created_at)
              FROM Orders o
              WHERE o.customer_id = Customer.id
            )`),
            "lastPurchase",
          ],
        ]
      },
      include: [
        {
          model: CustomerInfo,
          attributes: [
            "fullname", "first_name", "last_name", "avatar", "address",
            "phone_number", "birth_date"
          ],
          required: false,
        },
        {
          model: CustomerPaymentMethod,
          attributes: ["id", "method_type", "is_active", "created_at"],
          required: false,
        },
        {
          model: Orders,
          attributes: ["id", "total_amount", "status", "created_at"],
          include: [
            {
              model: OrderItem,
              attributes: ["quantity", "unit_price", "discounted_price"],
              include: [
                {
                  model: ProductItem,
                  attributes: ["name","sku"],
                  include: [
                    {
                      model: ProductImage,
                      attributes: ["image_url"],
                      required: false,
                    },
                  ],
                  required: false,
                },
              ],
              required: false,
            },
          ],
          required: false,
        },
      ],
    });

    if (!customer) {
      return res.status(404).json({ status: "error", message: "Kh√¥ng t√¨m th·∫•y kh√°ch h√†ng" });
    }

    res.status(200).json({ status: "success", data: customer });
  } catch (error) {
    console.error("L·ªói khi l·∫•y th√¥ng tin kh√°ch h√†ng:", error);
    next(error);
  }
},

  // üìå C·∫≠p nh·∫≠t th√¥ng tin kh√°ch h√†ng
  updateCustomer: async (req, res, next) => {
    try {
      const { id } = req.params;
      const { name, phone, address } = req.body;

      const customer = await Customer.findByPk(id);
      if (!customer) {
        return res.status(404).json({ status: "error", message: "Kh√¥ng t√¨m th·∫•y kh√°ch h√†ng" });
      }

      await customer.update({ name, phone, address });
      res.status(200).json({ status: "success", message: "C·∫≠p nh·∫≠t kh√°ch h√†ng th√†nh c√¥ng", data: customer });
    } catch (error) {
      next(error);
    }
  },

  // üìå X√≥a kh√°ch h√†ng
  deleteCustomer: async (req, res, next) => {
    try {
      const { id } = req.params;
      const customer = await Customer.findByPk(id);

      if (!customer) {
        return res.status(404).json({ status: "error", message: "Kh√¥ng t√¨m th·∫•y kh√°ch h√†ng" });
      }

      await customer.destroy();
      res.status(200).json({ status: "success", message: "X√≥a kh√°ch h√†ng th√†nh c√¥ng" });
    } catch (error) {
      next(error);
    }
  },
};

export default customerController;
